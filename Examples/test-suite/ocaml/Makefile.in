#######################################################################
# Makefile for ocaml test-suite
#######################################################################

LANGUAGE     = ocaml
OCAMLC       = @OCAMLC@
VARIANT      = _static
SCRIPTSUFFIX = _runme.ml

srcdir       = @srcdir@
top_srcdir   = @top_srcdir@
top_builddir = @top_builddir@

FAILING_CPP_TESTS = \
allowexcept \
allprotected \
apply_signed_char \
apply_strings \
cpp_enum \
default_constructor \
director_binary_string \
director_enum \
director_exception \
director_ignore \
director_nested \
director_pass_by_value \
director_primitives \
director_protected \
director_redefined \
director_string \
director_using \
enum_thorough \
member_pointer_const \
minherit \
nested_directors \
preproc_constants \
smart_pointer_inherit \
typedef_mptr \
using_protected \

FAILING_C_TESTS = \
enums \
preproc_constants_c \
string_simple \
unions \

ml_runme = $(SCRIPTPREFIX)$*$(SCRIPTSUFFIX)

run_testcase = \
	if [ -f $(srcdir)/$(ml_runme) ]; then \
		if [ $(srcdir) != . ]; then \
			cp $(srcdir)/$(ml_runme) $(ml_runme); \
		fi ; \
		$(COMPILETOOL) $(OCAMLC) -c $(ml_runme) && \
		if [ -f $(top_srcdir)/Examples/test-suite/$*.list ]; then \
			$(COMPILETOOL) $(OCAMLC) swig.cmo -custom -g -cc '$(CXX)' -o runme `cat $(top_srcdir)/Examples/test-suite/$(*).list | sed -e 's/\(.*\)/\1_wrap.o \1.cmo/g'`&& $(RUNTOOL) ./runme; \
		else \
			$(COMPILETOOL) $(OCAMLC) swig.cmo -custom -g -cc '$(CXX)' -o runme $(*).cmo $(*)_runme.cmo $(*)_wrap.o && $(RUNTOOL) ./runme; \
		fi ; \
	fi ;

include $(srcdir)/../common.mk

# Overridden variables here
# none!

# Custom tests - tests with additional commandline options
# none!

# Rules for the different types of tests
%.cpptest:
	$(setup)
	+$(swig_and_compile_cpp)
	$(run_testcase)

%.ctest:
	$(setup)
	+$(swig_and_compile_c)
	$(run_testcase)

%.multicpptest:
	+$(swig_and_compile_multi_cpp)
	$(setup)
	$(run_testcase)

# Clean
%.clean:
	@rm -f $*.ml $*.mli;

clean:
	$(MAKE) -f $(top_builddir)/$(EXAMPLES)/Makefile SRCDIR='$(SRCDIR)' ocaml_clean
